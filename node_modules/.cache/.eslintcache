[{"C:\\Separate disk\\Coding\\VS code\\Coincap_landing\\my_app\\src\\index.js":"1","C:\\Separate disk\\Coding\\VS code\\Coincap_landing\\my_app\\src\\App.js":"2","C:\\Separate disk\\Coding\\VS code\\Coincap_landing\\my_app\\src\\component\\Navabar.js":"3","C:\\Separate disk\\Coding\\VS code\\Coincap_landing\\my_app\\src\\component\\Banner.js":"4"},{"size":211,"mtime":1692786522556,"results":"5","hashOfConfig":"6"},{"size":228,"mtime":1692855332902,"results":"7","hashOfConfig":"6"},{"size":885,"mtime":1692855143395,"results":"8","hashOfConfig":"6"},{"size":5486,"mtime":1692855673731,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1slrqir",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Separate disk\\Coding\\VS code\\Coincap_landing\\my_app\\src\\index.js",[],[],[],"C:\\Separate disk\\Coding\\VS code\\Coincap_landing\\my_app\\src\\App.js",[],[],"C:\\Separate disk\\Coding\\VS code\\Coincap_landing\\my_app\\src\\component\\Navabar.js",["25"],[],"import react from \"react\";\r\nimport \"./Navbar.scss\";\r\nimport { IconButton, Typography } from \"@material-ui/core\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"navbar_content\">\r\n        <Typography>Coins</Typography>\r\n        <Typography>Exchanges</Typography>\r\n        <Typography>Swap</Typography>\r\n      </div>\r\n      <div>\r\n        <img src=\"https://coincap.io/static/logos/black.svg\" alt=\"icon\" />\r\n      </div>\r\n      <div className=\"navbar_content\">\r\n        <Typography>USD</Typography>\r\n        <Typography>English</Typography>\r\n        <IconButton>\r\n          <SearchIcon />\r\n        </IconButton>\r\n        <IconButton>\r\n          <SettingsIcon />\r\n        </IconButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Separate disk\\Coding\\VS code\\Coincap_landing\\my_app\\src\\component\\Banner.js",["26"],[],"import {\r\n    Button,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n  } from \"@material-ui/core\";\r\n  import axios from 'axios';\r\n  import React, { useEffect, useState } from \"react\";\r\n  import \"./Banner.scss\";\r\n  \r\n  export default function Banner() {\r\n    const api = \"https://api.coincap.io/v2/assets\";\r\n  \r\n    const [data, setData] = useState([]);\r\n  \r\n    const pageSize = 50;\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n  \r\n    async function fetchData() {\r\n      try {\r\n        let response = await axios.get(api);\r\n  \r\n        setData((prevData) => [...prevData, ...response.data.data]);\r\n      } catch (error) {\r\n        console.error(\"error while fetching data: \", error);\r\n      }\r\n    }\r\n    const totalPage = Math.ceil(data.length / pageSize);\r\n  \r\n    const sliceData = data.slice(0, 50 * currentPage);\r\n  \r\n    const [maxPage, setMaxPage] = useState(false);\r\n  \r\n    const loadMore = () => {\r\n      setCurrentPage(currentPage + 1);\r\n      setMaxPage(true);\r\n    };\r\n    useEffect(() => {\r\n      fetchData();\r\n    }, [currentPage]);\r\n  \r\n    const convertToReadableFormat = (number) => {\r\n      if (number >= 1e9) {\r\n        return (number / 1e9).toFixed(2) + \" b\";\r\n      } else if (number >= 1e6) {\r\n        return (number / 1e6).toFixed(2) + \" m\";\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <div className=\"banner_heading\">\r\n          <div className=\"banner_heading_subtitle\">\r\n            <Typography>MARKET CAP</Typography>\r\n            <Typography>$1.06T</Typography>\r\n          </div>\r\n          <div className=\"banner_heading_subtitle\">\r\n            <Typography>EXCHANGE VOL</Typography>\r\n            <Typography>$20.12B</Typography>\r\n          </div>\r\n          <div className=\"banner_heading_subtitle\">\r\n            <Typography>ASSETS</Typography>\r\n            <Typography>2,296</Typography>\r\n          </div>\r\n          <div className=\"banner_heading_subtitle\">\r\n            <Typography>EXCHANGES</Typography>\r\n            <Typography>73</Typography>\r\n          </div>\r\n          <div className=\"banner_heading_subtitle\">\r\n            <Typography>MARKETS</Typography>\r\n            <Typography>11,370</Typography>\r\n          </div>\r\n          <div className=\"banner_heading_subtitle\">\r\n            <Typography>BTC DOM INDEX</Typography>\r\n            <Typography>47.9%</Typography>\r\n          </div>\r\n        </div>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Rank</TableCell>\r\n                <TableCell>Name</TableCell>\r\n                <TableCell align=\"right\">Price</TableCell>\r\n                <TableCell align=\"right\">Market Cap</TableCell>\r\n                <TableCell align=\"right\">VWAP (24Hr)</TableCell>\r\n                <TableCell align=\"right\">Supply</TableCell>\r\n                <TableCell align=\"right\">Volume (24Hr)</TableCell>\r\n                <TableCell align=\"right\">Change (24Hr)</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {sliceData.map((e) => (\r\n                <TableRow key={e.id}>\r\n                  <TableCell>{e.rank}</TableCell>\r\n                  <TableCell>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"row\",\r\n                        alignItems: \"center\"\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={`https://assets.coincap.io/assets/icons/${e.symbol.toLowerCase()}@2x.png`}\r\n                        alt={e.name}\r\n                        style={{ maxWidth: \"2.5rem\", padding: \"0.5rem\" }}\r\n                      />\r\n  \r\n                      <div>\r\n                        <Typography>{e.name}</Typography>\r\n                        <Typography\r\n                          style={{ color: \"grey\", fontSize: \"0.75rem\" }}\r\n                        >\r\n                          {e.symbol}\r\n                        </Typography>\r\n                      </div>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {\"$\" + parseFloat(e.priceUsd).toFixed(2)}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {\"$\" + convertToReadableFormat(e.marketCapUsd)}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {parseFloat(e.vwap24Hr).toFixed(2)}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {\"$\" + convertToReadableFormat(e.maxSupply)}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {\"$\" + convertToReadableFormat(e.volumeUsd24Hr)}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {parseFloat(e.changePercent24Hr).toFixed(2) + \"%\"}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <div\r\n          style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"1rem\" }}\r\n        >\r\n          {!maxPage && (\r\n            <Button onClick={loadMore} variant=\"contained\" color=\"primary\">\r\n              Load More\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  ",{"ruleId":"27","severity":1,"message":"28","line":1,"column":8,"nodeType":"29","messageId":"30","endLine":1,"endColumn":13},{"ruleId":"27","severity":1,"message":"31","line":33,"column":11,"nodeType":"29","messageId":"30","endLine":33,"endColumn":20},"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","'totalPage' is assigned a value but never used."]